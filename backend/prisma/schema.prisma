

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  CASH_IN
  CASH_OUT
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

enum AlertType {
  LOW_BALANCE
}

model Agent {
  id           String    @id @default(uuid()) @db.Uuid 
  name         String    @db.VarChar(255)
  email        String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255) 
  idNumber     String    @unique @map("id_number") @db.VarChar(255) 
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  wallet      Wallet?       
  transactions Transaction[] 
  alerts      Alert[]       

  @@map("agents") 
}

model Wallet {
  id        String   @id @default(uuid()) @db.Uuid
  agentId   String   @unique @map("agent_id") @db.Uuid 
  balance   Decimal  @default(0.00) @db.Decimal(18, 2) 
  currency  String   @default("USD") @db.VarChar(3)    
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("wallets") 
}

model Transaction {
  id                  String          @id @default(uuid()) @db.Uuid
  agentId             String          @map("agent_id") @db.Uuid
  type                TransactionType
  amount              Decimal         @db.Decimal(18, 2)
  status              TransactionStatus @default(PENDING)
  externalTransactionId String?       @map("external_transaction_id") @db.VarChar(255) 
  metadata            Json?          
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("transactions") 
  @@index([agentId, createdAt(sort: Desc)]) 
}

model Alert {
  id            String    @id @default(uuid()) @db.Uuid
  agentId       String    @map("agent_id") @db.Uuid
  type          AlertType
  message       String    @db.Text
  thresholdValue Decimal?  @map("threshold_value") @db.Decimal(18, 2)
  isRead        Boolean   @default(false) @map("is_read")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("alerts") 
  @@index([agentId])
}
